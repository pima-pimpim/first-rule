import io, gzip, json
import pandas as pd
import streamlit as st

st.set_page_config(page_title="Projects JSONs (.json/.json.gz) ‚Üí Combined Table", layout="wide")
st.title("üìÅ ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå JSON ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ID ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ---------- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ----------
uploaded_files = st.file_uploader(
    "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JSON/JSON.GZ ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)",
    type=["json", "gz"],
    accept_multiple_files=True
)

if not uploaded_files:
    st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .json ‡∏´‡∏£‡∏∑‡∏≠ .json.gz ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå")
    st.stop()

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå ----------
projects_all = []
for up in uploaded_files:
    try:
        raw = up.read()
        name = up.name.lower()
        if name.endswith(".gz"):
            with gzip.open(io.BytesIO(raw), "rt", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = json.loads(raw.decode("utf-8"))

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö {"projects":[...]} ‡∏´‡∏£‡∏∑‡∏≠ list ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        projects = data.get("projects", data) if isinstance(data, dict) else data
        if isinstance(projects, list):
            projects_all.extend(projects)
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {up.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

if not projects_all:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• projects ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    st.stop()

st.success(f"‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(projects_all):,} projects")

# ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ----------
df_all = pd.json_normalize(projects_all, sep=".")

labels, id_by_label = [], {}
for p in projects_all:
    pid = str(p.get("project_id", ""))
    title = str(p.get("title", "") or "")
    label = f"{pid} ‚Äî {title}" if title else pid
    labels.append(label)
    id_by_label[label] = pid

choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", labels)
selected_id = id_by_label[choice]

# ---------- ‡∏î‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ----------
row_df = df_all[df_all["project_id"].astype(str) == str(selected_id)]
if row_df.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö project_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

row = row_df.iloc[0]
nested_cols = [c for c in row.index if c.endswith("similar_projects_by_title") or c.endswith("similar_projects_by_objective")]
base_cols = [c for c in row.index if c not in nested_cols]
kv_df = row[base_cols].to_frame(name="value").rename_axis("field").reset_index()

st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Key‚ÄìValue)")
st.dataframe(kv_df, use_container_width=True, height=360)
st.download_button(
    "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (CSV)",
    data=kv_df.to_csv(index=False).encode("utf-8-sig"),
    file_name=f"{selected_id}_main.csv",
    mime="text/csv"
)

# ---------- Objective ----------
if "objective" in row.index and isinstance(row["objective"], str):
    st.markdown("**üìù Objective (‡πÄ‡∏ï‡πá‡∏°):**")
    st.text_area("Objective", row["objective"], height=200, label_visibility="collapsed")

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Similar ----------
def show_nested_table(nested_list, key_suffix):
    if isinstance(nested_list, list) and len(nested_list):
        df_nested = pd.json_normalize(nested_list, sep=".")
        st.dataframe(df_nested, use_container_width=True, height=280)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

sel_obj = next((p for p in projects_all if str(p.get("project_id","")) == str(selected_id)), None)
st.subheader("üîé Similar Projects ‚Äî by Title")
show_nested_table(sel_obj.get("similar_projects_by_title", []) if sel_obj else [], "similar_by_title")

st.subheader("üîé Similar Projects ‚Äî by Objective")
show_nested_table(sel_obj.get("similar_projects_by_objective", []) if sel_obj else [], "similar_by_objective")

if "no_matches" in row.index:
    st.markdown(f"**‚úÖ no_matches:** `{row['no_matches']}`")