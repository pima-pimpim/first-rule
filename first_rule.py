# app.py
import json
import pandas as pd
import streamlit as st

st.set_page_config(page_title="Projects JSON ‚Üí Dropdown & Tables", layout="wide")
st.title("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ID ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")

# ---------- ‡πÇ‡∏´‡∏•‡∏î JSON ----------
col1, col2 = st.columns(2)
data = None

with col1:
    f = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JSON", type=["json"])
    if f:
        data = json.load(f)

with col2:
    txt = st.text_area("‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á JSON ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ", height=220)
    if txt.strip():
        try:
            data = json.loads(txt)
        except Exception as e:
            st.error(f"‡∏≠‡πà‡∏≤‡∏ô JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

if data is None:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á JSON ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
    st.stop()

# ---------- ‡∏î‡∏∂‡∏á list ‡∏Ç‡∏≠‡∏á projects ----------
projects = data.get("projects", data)  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏ï‡∏£‡∏á ‡πÜ
if not isinstance(projects, list) or len(projects) == 0:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ projects ‡πÉ‡∏ô JSON")
    st.stop()

# DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏î‡∏£‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
df_all = pd.json_normalize(projects, sep=".")

# ‡∏ó‡∏≥ label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏£‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå: "project_id ‚Äî title"
labels = []
id_by_label = {}
for p in projects:
    pid = str(p.get("project_id", ""))
    title = str(p.get("title", ""))
    label = f"{pid} ‚Äî {title}" if title else pid
    labels.append(label)
    id_by_label[label] = pid

choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", labels, index=0)
selected_id = id_by_label[choice]

# ---------- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô ----------
row_df = df_all[df_all["project_id"].astype(str) == str(selected_id)]
if row_df.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö project_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

row = row_df.iloc[0]

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Key‚ÄìValue (‡∏ï‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å) ----------
nested_cols = [c for c in row.index if c.endswith("similar_projects_by_title")
               or c.endswith("similar_projects_by_objective")]
base_cols = [c for c in row.index if c not in nested_cols]

kv_df = (
    row[base_cols]
    .to_frame(name="value")
    .rename_axis("field")
    .reset_index()
)

st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Key‚ÄìValue)")
st.dataframe(kv_df, use_container_width=True, height=360)

st.download_button(
    "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (CSV)",
    data=kv_df.to_csv(index=False).encode("utf-8-sig"),
    file_name=f"{selected_id}_main.csv",
    mime="text/csv"
)

# ‡πÅ‡∏™‡∏î‡∏á objective ‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
if "objective" in row.index and isinstance(row["objective"], str):
    st.markdown("**üìù Objective (‡πÄ‡∏ï‡πá‡∏°):**")
    st.text_area("Objective", row["objective"], height=200, label_visibility="collapsed")

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Similar by Title ----------
st.subheader("üîé Similar Projects ‚Äî by Title")
sel_obj = next((p for p in projects if str(p.get("project_id","")) == str(selected_id)), None)

def show_nested_table(nested_list, title_fn):
    if isinstance(nested_list, list) and len(nested_list):
        df_nested = pd.json_normalize(nested_list, sep=".")
        st.dataframe(df_nested, use_container_width=True, height=280)
        st.download_button(
            f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î {title_fn} (CSV)",
            data=df_nested.to_csv(index=False).encode("utf-8-sig"),
            file_name=f"{selected_id}_{title_fn.replace(' ','_')}.csv",
            mime="text/csv"
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

if sel_obj is None:
    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
else:
    show_nested_table(sel_obj.get("similar_projects_by_title", []), "similar_by_title")

    st.subheader("üîé Similar Projects ‚Äî by Objective")
    show_nested_table(sel_obj.get("similar_projects_by_objective", []), "similar_by_objective")

# ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏ò‡∏á no_matches (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ----------
if "no_matches" in row.index:
    st.markdown(f"**‚úÖ no_matches:** `{row['no_matches']}`")