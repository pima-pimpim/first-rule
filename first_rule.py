# app.py
import io
import json
import gzip
import pandas as pd
import streamlit as st

st.set_page_config(page_title="Projects JSON (.json/.json.gz) ‚Üí Dropdown & Tables", layout="wide")
st.title("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project ID ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")

# ---------- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .json ‡πÅ‡∏•‡∏∞ .json.gz) ----------
uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JSON ‡∏´‡∏£‡∏∑‡∏≠ JSON.GZ", type=["json", "gz"])

data = None
if uploaded:
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå..."):
        try:
            # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡πà‡∏≤‡∏ô
            name = uploaded.name.lower()
            raw = uploaded.read()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            if name.endswith(".gz"):
                # ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô gzip ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
                with gzip.open(io.BytesIO(raw), mode="rt", encoding="utf-8") as f:
                    data = json.load(f)
            else:
                # ‡πÑ‡∏ü‡∏•‡πå .json ‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                data = json.loads(raw.decode("utf-8"))
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")

if data is None:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .json ‡∏´‡∏£‡∏∑‡∏≠ .json.gz ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    st.stop()

# ---------- ‡∏î‡∏∂‡∏á list ‡∏Ç‡∏≠‡∏á projects ----------
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á {"projects":[...]} ‡πÅ‡∏•‡∏∞ list ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
projects = data.get("projects", data) if isinstance(data, dict) else data
if not isinstance(projects, list) or len(projects) == 0:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ projects ‡πÉ‡∏ô JSON")
    st.stop()

# DataFrame ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏î‡∏£‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß
df_all = pd.json_normalize(projects, sep=".")

# ---------- ‡∏ó‡∏≥ dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å project ----------
labels = []
id_by_label = {}
for p in projects:
    pid = str(p.get("project_id", ""))
    title = str(p.get("title", ""))
    label = f"{pid} ‚Äî {title}" if title else pid
    labels.append(label)
    id_by_label[label] = pid

choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (project_id ‚Äî title)", labels, index=0)
selected_id = id_by_label[choice]

# ---------- ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ----------
row_df = df_all[df_all["project_id"].astype(str) == str(selected_id)]
if row_df.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö project_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

row = row_df.iloc[0]

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Key‚ÄìValue (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡πà‡∏≠‡∏¢) ----------
nested_cols = [c for c in row.index if c.endswith("similar_projects_by_title")
               or c.endswith("similar_projects_by_objective")]
base_cols = [c for c in row.index if c not in nested_cols]

kv_df = (
    row[base_cols]
    .to_frame(name="value")
    .rename_axis("field")
    .reset_index()
)

st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Key‚ÄìValue)")
st.dataframe(kv_df, use_container_width=True, height=360)
st.download_button(
    "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (CSV)",
    data=kv_df.to_csv(index=False).encode("utf-8-sig"),
    file_name=f"{selected_id}_main.csv",
    mime="text/csv"
)

# ---------- ‡πÅ‡∏™‡∏î‡∏á objective ‡πÄ‡∏ï‡πá‡∏° ----------
if "objective" in row.index and isinstance(row["objective"], str):
    st.markdown("**üìù Objective (‡πÄ‡∏ï‡πá‡∏°):**")
    st.text_area("Objective", row["objective"], height=200, label_visibility="collapsed")

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Similar Projects ----------
def show_nested_table(nested_list, key_suffix):
    if isinstance(nested_list, list) and len(nested_list):
        df_nested = pd.json_normalize(nested_list, sep=".")
        st.dataframe(df_nested, use_container_width=True, height=280)
        st.download_button(
            f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î {key_suffix} (CSV)",
            data=df_nested.to_csv(index=False).encode("utf-8-sig"),
            file_name=f"{selected_id}_{key_suffix}.csv",
            mime="text/csv"
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ‡∏´‡∏≤ object ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà flatten)
sel_obj = next((p for p in projects if str(p.get("project_id","")) == str(selected_id)), None)

st.subheader("üîé Similar Projects ‚Äî by Title")
show_nested_table(sel_obj.get("similar_projects_by_title", []) if sel_obj else [], "similar_by_title")

st.subheader("üîé Similar Projects ‚Äî by Objective")
show_nested_table(sel_obj.get("similar_projects_by_objective", []) if sel_obj else [], "similar_by_objective")

# ---------- ‡∏ò‡∏á no_matches (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ----------
if "no_matches" in row.index:
    st.markdown(f"**‚úÖ no_matches:** `{row['no_matches']}`")